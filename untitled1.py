# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xeUyMlBbX3JdCqLBCrp5VDm451q5Wedu
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d naseeruddin444/top-tourist-destinations-in-pakistan

import zipfile
with zipfile.ZipFile("top-tourist-destinations-in-pakistan.zip", 'r') as zip_ref:
    zip_ref.extractall("data")

df = pd.read_csv("data/Tourist Destinations.csv")  # Replace with the actual filename
df.head()

# Drop any missing values
df.dropna(inplace=True)

# Encode categorical columns
le_category = LabelEncoder()
le_province = LabelEncoder()

df['category_encoded'] = le_category.fit_transform(df['category'])
df['province_encoded'] = le_province.fit_transform(df['district'])  # Assuming district = province

df.head()

features = df[['category_encoded', 'province_encoded']]
knn = NearestNeighbors(n_neighbors=5, metric='euclidean')
knn.fit(features)

from sklearn.preprocessing import LabelEncoder
import numpy as np
from sklearn.neighbors import NearestNeighbors

# Load dataset (replace with actual loading code if needed)
# df = pd.read_csv("your_dataset.csv")

# Initialize LabelEncoders
le_category = LabelEncoder()
le_district = LabelEncoder()

# Fit encoders on the dataset
df['category_encoded'] = le_category.fit_transform(df['category'])
df['district_encoded'] = le_district.fit_transform(df['district'])

# Prepare feature matrix
X = df[['category_encoded', 'district_encoded']]

# Train KNN model
knn = NearestNeighbors(n_neighbors=5, metric='euclidean')
knn.fit(X)

def recommend_destinations(district, category, n_recommendations=5):
    # Check if inputs exist in the dataset
    if category not in le_category.classes_:
        print(f"Category '{category}' is not in the dataset. Available categories are: {list(le_category.classes_)}")
        return

    if district not in le_district.classes_:
        print(f"District '{district}' is not in the dataset. Available districts are: {list(le_district.classes_)}")
        return

    # Step 1: **Filter by category first, then district**
    filtered_df = df[(df['category'] == category) & (df['district'] == district)]

    if filtered_df.empty:
        print(f"No exact match found for '{category}' in {district}. Expanding search to district only.")
        filtered_df = df[df['district'] == district]  # Relax filtering if no exact match

    if filtered_df.empty:
        print(f"No destinations found in {district}.")
        return

    # Step 2: Encode user input
    district_code = le_district.transform([district])[0]
    category_code = le_category.transform([category])[0]

    user_pref = pd.DataFrame([[category_code, district_code]], columns=['category_encoded', 'district_encoded'])

    # Step 3: Apply KNN only on filtered data
    filtered_X = filtered_df[['category_encoded', 'district_encoded']]
    filtered_knn = NearestNeighbors(n_neighbors=min(n_recommendations, len(filtered_X)), metric='euclidean')
    filtered_knn.fit(filtered_X)

    distances, indices = filtered_knn.kneighbors(user_pref, n_neighbors=min(n_recommendations, len(filtered_X)))

    recommendations = filtered_df.iloc[indices[0]][['_key', 'category', 'district']]
    return recommendations

# Example usage:
print(recommend_destinations("Azad Kashmir", "Mountainous", 5))